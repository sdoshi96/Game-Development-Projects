import simplegui
import random

CARD_SIZE=(73,98)
CARD_CENTER=(36.5,49)
TITLE_POS=(100,40)
SCORE_POS=(480,30)
MESSAGE_POS=(100,80)
MY_HAND_POS=(60,410)
DEALER_HAND_POS=(60,210)
card_images=simplegui.load_image("d:/cards.png")

CARD_BACK_SIZE=(71,96)
CARD_BACK_CENTER=(35.5,48)
card_back=simplegui.load_image("d:/card_back.png")

in_play=False
uncover_dealers_card=True
message="Hit or Stand"
score=0

SUITS=('C', 'S', 'H', 'D')
RANKS=('A','2','3','4','5','6','7','8','9','T','J','Q','K')
VALUES={'A':1, '2':2, '3':3, '4':4, '5':5, '6':6, '7':7, '8':8, '9':9, 'T':10, 'J':10, 'Q':10, 'K':10}



#CARD_CLASS

class Card:
    def __init__(self,suit,rank):
        if(suit in SUITS)and(rank in RANKS):
            self.suit=suit 
            self.rank=rank
        else:
            self.suit=None
            self.rank=None
            print "Invalid Card:",suit, rank
            
    def __str__(self):
        return self.suit + self.rank
    
    def get_suit(self):
        return self.suit
    
    def get_rank(self):
        return self.rank
    
    def draw(self,canvas,pos,flipped):
        if not flipped:
            card_loc=(CARD_CENTER[0]+CARD_SIZE[0]*RANKS.index(self.rank),
                  CARD_CENTER[1]+CARD_SIZE[1]*SUITS.index(self.suit))
            canvas.draw_image(card_images,card_loc,CARD_SIZE,[pos[0]+CARD_CENTER[0],pos[1]+CARD_CENTER[1]],CARD_SIZE)
        else:
            canvas.draw_image(card_back,CARD_BACK_CENTER,CARD_BACK_SIZE,[pos[0]+CARD_BACK_CENTER[0],pos[1]+CARD_BACK_CENTER[1]],CARD_BACK_SIZE)
 
class Hand:
    def __init__(self,owner):
        self.cards=[]
        self.cover_second=False
        
    def __str__(self):
        s=''
        for crd in self.cards:
            s=s+" "+str(crd)
            
        return s
    
    def add_card(self,card):
        self.cards.append(card)
        
    def get_card(self,pos):
        return self.cards[pos]
    
    def set_cover_second(self, cover):
        self.cover_second = cover
    
    def second_covered(self):
        return self.cover_second
        
    def get_value(self):
        value = 0
        for card in self.cards:
            value += VALUES[card.get_rank()]
        if self.count_aces() == 0:
            return value
        else:
            if value + 10 > 21:
                return value
            else:
                return value + 10
                
    def number_cards(self):
        number=0
        for crd in self.cards:
            number += 1
        return number
        
    def busted(self):
        if self.get_value() > 21:
            return True
        else:
            return False
            
    def draw(self, canvas, p):
        i=0
        for crd in self.cards:
            if self.cover_second and i==1:
                crd.draw(canvas, [p[0] + i * (CARD_SIZE[0] + 20), p[1]], True)
            else:
                crd.draw(canvas, [p[0] + i * (CARD_SIZE[0] + 20), p[1]], False)
            i += 1
            
    def hit(self, deck):
        card = deck.deal_card()
        self.add_card(card)
        
    def count_aces(self):
        aces = 0
        for crd in self.cards:
            if crd.get_rank() == 'A':
                aces += 1
        return aces
    
            
            
class Deck:
    def __init__(self):
        self.deck= [Card(suit, rank) for suit in SUITS for rank in RANKS]
        self.shuffle()
    
    def shuffle(self):
        random.shuffle(self.deck)
    
    def deal_card(self):
        return self.deck.pop()
        
    def __str__(self):
        print "[",
        for crd in self.deck:
            print crd,
        print "]"
        
        
def deal():
    global outcome, in_play, deck, my_hand, dealer_hand, message, score
    init()
    if in_play:
        score -= 1
    in_play = True
    
    my_hand.hit(deck)
    my_hand.hit(deck)
    
    dealer_hand.hit(deck)
    dealer_hand.hit(deck)
    
    message= "In play. Hit or Stand?"
    dealer_hand.set_cover_second(True)
    
    
def hit():
    global in_play, score, message
    if not my_hand.busted() and in_play:
        my_hand.hit(deck)
        if my_hand.busted():
            dealer_hand.set_cover_second(False)
            in_play = False
            message = "U have Busted. Deal?"
            score -= 1
            
    
def stand():
    global dealer_hand, in_play, score, message
    if in_play:
        if not my_hand.busted():
            dealer_hand.set_cover_second(False)
        while dealer_hand.get_value() < 17:
            dealer_hand.hit(deck)
            
        if dealer_hand.busted():
            message = "Dealer busted. U won! New Deal?"
            score += 1
        else:
            if dealer_hand.get_value() >= my_hand.get_value():
                message = "Dealer wins! New Deal?"
                score -= 1
            else:
                message = "You Won! New Deal?"
                score += 1
                
        in_play = False
    else:
        message = "New Deal?"
        
def init():
    global in_play, my_hand, dealer_hand, deck
    deck = Deck()
    
    my_hand = Hand("player")
    
    dealer_hand = Hand("dealer")
    
def draw(canvas):
    global my_hand, dealer_hand
    canvas.draw_text("BlackJack", TITLE_POS, 40, "Red")
    canvas.draw_text("Score" + str(score), SCORE_POS, 24, "Black")
    canvas.draw_text(message, MESSAGE_POS, 24, "Black")
    canvas.draw_text("Dealer", (60,200), 24 , "Black")
    canvas.draw_text("Player", (60,400), 24 , "Black")
    
    my_hand.draw(canvas, MY_HAND_POS)
    dealer_hand.draw(canvas, DEALER_HAND_POS)
    
    
    
    
frame=simplegui.create_frame("BlackJack", 600, 600)
frame.set_canvas_background("Green")

frame.add_button("Deal", deal, 200)
frame.add_button("Hit", hit, 200)
frame.add_button("Stand", stand, 200)
frame.set_draw_handler(draw)

deal()
frame.start()